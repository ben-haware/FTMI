name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        run: |
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "Release ${{ github.ref_name }} already exists, skipping creation"
          else
            gh release create ${{ github.ref_name }} \
              --title "Release ${{ github.ref_name }}" \
              --generate-notes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ftmi
            asset_name: ftmi-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: ftmi
            asset_name: ftmi-x86_64-unknown-linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ftmi.exe
            asset_name: ftmi-x86_64-pc-windows-msvc.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ftmi
            asset_name: ftmi-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ftmi
            asset_name: ftmi-aarch64-apple-darwin

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload Release Asset
      run: |
        gh release upload ${{ github.ref_name }} \
          ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}#${{ matrix.asset_name }} \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate cargo-binstall metadata
      run: |
        mkdir -p .cargo
        cat > .cargo/config.toml << EOF
        [package.metadata.binstall]
        pkg-url = "{ repo }/releases/download/v{ version }/{ name }-{ target }{ binary-ext }"
        bin-dir = "{ bin }{ binary-ext }"
        pkg-fmt = "bin"
        EOF

  publish-crate:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true